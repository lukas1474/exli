{"version":3,"file":"index.js","mappings":";;;;;;;;;;;CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,GACe,iBAAZC,QACdA,QAAmB,UAAID,IAEvBD,EAAgB,UAAIC,IARtB,CASGK,MAAM,WACT,Y,aCTA,IAAIC,EAAsB,CCA1B,EAAyBL,IACH,oBAAXM,QAA0BA,OAAOC,aAC1CC,OAAOC,eAAeT,EAASM,OAAOC,YAAa,CAAEG,MAAO,WAE7DF,OAAOC,eAAeT,EAAS,aAAc,CAAEU,OAAO,M,YCLhD,ICEMC,EAAU,WACrBC,MDHqB,wCCIpBC,MAAK,SAACC,GAAD,OAA+BA,EAAIC,WCF9BC,EAAe,WDYK,IACzBC,EACAC,EACAC,EAFAF,GAAoB,IAAIG,MAAOC,UAC/BH,EAAoBI,aAAaC,QAAQ,iBACzCJ,EAAeK,KAAKC,OAAOR,GAAcC,GAAY,IAAK,GAAG,GAAG,MAGjEI,aAAaC,QAAQ,cAAgBJ,GAF9B,IAGVR,ICjBFA,K,OCaFe,OAAOC,iBAAiB,QAAQ,WAC9BX,O,GNRF","sources":["webpack://MyLibrary/webpack/universalModuleDefinition","webpack://MyLibrary/webpack/bootstrap","webpack://MyLibrary/webpack/runtime/make namespace object","webpack://MyLibrary/./src/config.js","webpack://MyLibrary/./src/api.ts","webpack://MyLibrary/./src/Countries.ts","webpack://MyLibrary/./src/index.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"MyLibrary\"] = factory();\n\telse\n\t\troot[\"MyLibrary\"] = factory();\n})(self, function() {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export const API_URL = `https://restcountries.eu/rest/v2/all`;\n","import { API_URL } from \"./config\";\n\nexport const getData = (): void => {\n  fetch(API_URL)\n  .then((res: { json: () => any; }) => res.json())\n  // .then((data: any) => localStorage.setItem('countries', JSON.stringify(data)))\n  \n  // const fetchTime: string = new Date().getTime().toString();\n  // localStorage.setItem('lastFetchTime', fetchTime)\n  \n};\n\n// console.log( 'kraje', localStorage.countries)\n\nexport const checkLocalStorage = (): void => {\n  const nextFetch: number = new Date().getTime();\n  const lastFetch: string = localStorage.getItem('lastFetchTime');\n  const diff: number = Math.floor((nextFetch - (+lastFetch))/1000/60/60/24)\n  const week= 7;\n\n  if (!localStorage.getItem('countries') || diff >= week) {\n    getData()\n  }\n}\n","import { getData, checkLocalStorage } from \"./api\";\n\nexport const getCountries = () => {\n  checkLocalStorage();\n  getData();\n};\n","/**\n * Ściągnij wszystkie możliwe dane państw z pomocą API: https://restcountries.eu/. W dalszej części kursu będą one nazywane Tablicą Państw (TP).\n * Ściągnięte dane zapisz w sposób, który pozwoli na ich ponowne wykorzystanie po zamknięciu i ponownym otwarciu przeglądarki,\n * Przy starcie aplikacji sprawdź, czy dane państw istnieją w pamięci przeglądarki.\n * Jeśli nie, ściągnij je,\n * Przy starcie aplikacji sprawdź ile czasu minęło od poprzedniego ściągnięcia danych państw.\n * Jeśli od ostatniego razu minęło co najmniej 7 dni, ściągnij i zapisz je ponownie.\n * Stwórz metodę, która przy ponownym ściąganiu danych państw porówna populację między starym i nowym zestawem danych oraz wyświetli wszystkie nazwy państw,\n * których populacja uległa zmianie.\n *\n * Kod powinien być w pełni otypowany.\n * Kod powinien posiadać pełen zestaw testów (Jest).\n * Kod może posiadać komentarze.\n */\n\nimport { getCountries } from \"./Countries\";\n\nwindow.addEventListener(\"load\", () => {\n  getCountries();\n});\n"],"names":["root","factory","exports","module","define","amd","self","__webpack_require__","Symbol","toStringTag","Object","defineProperty","value","getData","fetch","then","res","json","getCountries","nextFetch","lastFetch","diff","Date","getTime","localStorage","getItem","Math","floor","window","addEventListener"],"sourceRoot":""}